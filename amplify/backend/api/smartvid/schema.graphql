# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

input CreateReporteDashboardInput {
	Tiempo: String!
}

input CreateSensorHumedRelativaInput {
	Tiempo: String!
	humedadRelativa: String!
}

input CreateSensorHumedSueloInput {
	Tiempo: String!
	humedadSuelo: String!
}

input CreateSensorLuminosidadInput {
	Tiempo: String!
	luminosidadSolar: String!
}

input CreateSensorTempRelativaInput {
	Tiempo: String!
	temperaturaRelativa: String!
}

input CreateSensorTempSueloInput {
	Tiempo: String!
	temperaturaSuelo: String!
}

input CreateTodoInput {
	id: ID
	name: String!
	description: String
}

input DeleteReporteDashboardInput {
	Tiempo: String!
}

input DeleteSensorHumedRelativaInput {
	Tiempo: String!
	humedadRelativa: String!
}

input DeleteSensorHumedSueloInput {
	Tiempo: String!
	humedadSuelo: String!
}

input DeleteSensorLuminosidadInput {
	Tiempo: String!
	luminosidadSolar: String!
}

input DeleteSensorTempRelativaInput {
	Tiempo: String!
	temperaturaRelativa: String!
}

input DeleteSensorTempSueloInput {
	Tiempo: String!
	temperaturaSuelo: String!
}

input DeleteTodoInput {
	id: ID!
}

enum ModelAttributeTypes {
	binary
	binarySet
	bool
	list
	map
	number
	numberSet
	string
	stringSet
	_null
}

input ModelBooleanInput {
	ne: Boolean
	eq: Boolean
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelFloatInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: [Float]
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelIDInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
	size: ModelSizeInput
}

input ModelIntInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
}

input ModelSizeInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: [Int]
}

enum ModelSortDirection {
	ASC
	DESC
}

input ModelStringInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
	attributeExists: Boolean
	attributeType: ModelAttributeTypes
	size: ModelSizeInput
}

input ModelTodoConditionInput {
	name: ModelStringInput
	description: ModelStringInput
	and: [ModelTodoConditionInput]
	or: [ModelTodoConditionInput]
	not: ModelTodoConditionInput
}

type ModelTodoConnection {
	items: [Todo]!
	nextToken: String
}

input ModelTodoFilterInput {
	id: ModelIDInput
	name: ModelStringInput
	description: ModelStringInput
	and: [ModelTodoFilterInput]
	or: [ModelTodoFilterInput]
	not: ModelTodoFilterInput
}

type Mutation {
	createTodo(input: CreateTodoInput!, condition: ModelTodoConditionInput): Todo
	updateTodo(input: UpdateTodoInput!, condition: ModelTodoConditionInput): Todo
	deleteTodo(input: DeleteTodoInput!, condition: ModelTodoConditionInput): Todo
	createReporteDashboard(input: CreateReporteDashboardInput!): ReporteDashboard
	updateReporteDashboard(input: UpdateReporteDashboardInput!): ReporteDashboard
	deleteReporteDashboard(input: DeleteReporteDashboardInput!): ReporteDashboard
	createSensorTempSuelo(input: CreateSensorTempSueloInput!): SensorTempSuelo
	updateSensorTempSuelo(input: UpdateSensorTempSueloInput!): SensorTempSuelo
	deleteSensorTempSuelo(input: DeleteSensorTempSueloInput!): SensorTempSuelo
	createSensorTempRelativa(input: CreateSensorTempRelativaInput!): SensorTempRelativa
	updateSensorTempRelativa(input: UpdateSensorTempRelativaInput!): SensorTempRelativa
	deleteSensorTempRelativa(input: DeleteSensorTempRelativaInput!): SensorTempRelativa
	createSensorLuminosidad(input: CreateSensorLuminosidadInput!): SensorLuminosidad
	updateSensorLuminosidad(input: UpdateSensorLuminosidadInput!): SensorLuminosidad
	deleteSensorLuminosidad(input: DeleteSensorLuminosidadInput!): SensorLuminosidad
	createSensorHumedRelativa(input: CreateSensorHumedRelativaInput!): SensorHumedRelativa
	updateSensorHumedRelativa(input: UpdateSensorHumedRelativaInput!): SensorHumedRelativa
	deleteSensorHumedRelativa(input: DeleteSensorHumedRelativaInput!): SensorHumedRelativa
	createSensorHumedSuelo(input: CreateSensorHumedSueloInput!): SensorHumedSuelo
	updateSensorHumedSuelo(input: UpdateSensorHumedSueloInput!): SensorHumedSuelo
	deleteSensorHumedSuelo(input: DeleteSensorHumedSueloInput!): SensorHumedSuelo
}

type Query {
	getTodo(id: ID!): Todo
	listTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection
	getReporteDashboard(Tiempo: String!): ReporteDashboard
	listReporteDashboards(filter: TableReporteDashboardFilterInput, limit: Int, nextToken: String): ReporteDashboardConnection
	getSensorTempSuelo(temperaturaSuelo: String!, Tiempo: String!): SensorTempSuelo
	listSensorTempSuelos(filter: TableSensorTempSueloFilterInput, limit: Int, nextToken: String): SensorTempSueloConnection
	getSensorTempRelativa(temperaturaRelativa: String!, Tiempo: String!): SensorTempRelativa
	listSensorTempRelativas(filter: TableSensorTempRelativaFilterInput, limit: Int, nextToken: String): SensorTempRelativaConnection
	getSensorLuminosidad(luminosidadSolar: String!, Tiempo: String!): SensorLuminosidad
	listSensorLuminosidads(filter: TableSensorLuminosidadFilterInput, limit: Int, nextToken: String): SensorLuminosidadConnection
	getSensorHumedRelativa(humedadRelativa: String!, Tiempo: String!): SensorHumedRelativa
	listSensorHumedRelativas(filter: TableSensorHumedRelativaFilterInput, limit: Int, nextToken: String): SensorHumedRelativaConnection
	getSensorHumedSuelo(humedadSuelo: String!, Tiempo: String!): SensorHumedSuelo
	listSensorHumedSuelos(filter: TableSensorHumedSueloFilterInput, limit: Int, nextToken: String): SensorHumedSueloConnection
}

type ReporteDashboard {
	Tiempo: String!
	payload: String!
}

type ReporteDashboardConnection {
	items: [ReporteDashboard]
	nextToken: String
}

type SensorHumedRelativa @model{
	Tiempo: String!
	humedadRelativa: String!
}

type SensorHumedRelativaConnection {
	items: [SensorHumedRelativa]
	nextToken: String
}

type SensorHumedSuelo @model{
	Tiempo: String!
	humedadSuelo: String!
}

type SensorHumedSueloConnection {
	items: [SensorHumedSuelo]
	nextToken: String
}

type SensorLuminosidad @model{
	Tiempo: String!
	luminosidadSolar: String!
}

type SensorLuminosidadConnection {
	items: [SensorLuminosidad]
	nextToken: String
}

type SensorTempRelativa @model{
	Tiempo: String!
	temperaturaRelativa: String!
}

type SensorTempRelativaConnection {
	items: [SensorTempRelativa]
	nextToken: String
}

type SensorTempSuelo @model{
	Tiempo: String!
	temperaturaSuelo: String!
}

type SensorTempSueloConnection {
	items: [SensorTempSuelo]
	nextToken: String
}

type Subscription {
	onCreateTodo: Todo
		@aws_subscribe(mutations: ["createTodo"])
	onUpdateTodo: Todo
		@aws_subscribe(mutations: ["updateTodo"])
	onDeleteTodo: Todo
		@aws_subscribe(mutations: ["deleteTodo"])
	onCreateReporteDashboard(Tiempo: String): ReporteDashboard
		@aws_subscribe(mutations: ["createReporteDashboard"])
	onUpdateReporteDashboard(Tiempo: String): ReporteDashboard
		@aws_subscribe(mutations: ["updateReporteDashboard"])
	onDeleteReporteDashboard(Tiempo: String): ReporteDashboard
		@aws_subscribe(mutations: ["deleteReporteDashboard"])
	onCreateSensorTempSuelo(Tiempo: String, temperaturaSuelo: String): SensorTempSuelo
		@aws_subscribe(mutations: ["createSensorTempSuelo"])
	onUpdateSensorTempSuelo(Tiempo: String, temperaturaSuelo: String): SensorTempSuelo
		@aws_subscribe(mutations: ["updateSensorTempSuelo"])
	onDeleteSensorTempSuelo(Tiempo: String, temperaturaSuelo: String): SensorTempSuelo
		@aws_subscribe(mutations: ["deleteSensorTempSuelo"])
	onCreateSensorTempRelativa(Tiempo: String, temperaturaRelativa: String): SensorTempRelativa
		@aws_subscribe(mutations: ["createSensorTempRelativa"])
	onUpdateSensorTempRelativa(Tiempo: String, temperaturaRelativa: String): SensorTempRelativa
		@aws_subscribe(mutations: ["updateSensorTempRelativa"])
	onDeleteSensorTempRelativa(Tiempo: String, temperaturaRelativa: String): SensorTempRelativa
		@aws_subscribe(mutations: ["deleteSensorTempRelativa"])
	onCreateSensorLuminosidad(Tiempo: String, luminosidadSolar: String): SensorLuminosidad
		@aws_subscribe(mutations: ["createSensorLuminosidad"])
	onUpdateSensorLuminosidad(Tiempo: String, luminosidadSolar: String): SensorLuminosidad
		@aws_subscribe(mutations: ["updateSensorLuminosidad"])
	onDeleteSensorLuminosidad(Tiempo: String, luminosidadSolar: String): SensorLuminosidad
		@aws_subscribe(mutations: ["deleteSensorLuminosidad"])
	onCreateSensorHumedRelativa(Tiempo: String, humedadRelativa: String): SensorHumedRelativa
		@aws_subscribe(mutations: ["createSensorHumedRelativa"])
	onUpdateSensorHumedRelativa(Tiempo: String, humedadRelativa: String): SensorHumedRelativa
		@aws_subscribe(mutations: ["updateSensorHumedRelativa"])
	onDeleteSensorHumedRelativa(Tiempo: String, humedadRelativa: String): SensorHumedRelativa
		@aws_subscribe(mutations: ["deleteSensorHumedRelativa"])
	onCreateSensorHumedSuelo(Tiempo: String, humedadSuelo: String): SensorHumedSuelo
		@aws_subscribe(mutations: ["createSensorHumedSuelo"])
	onUpdateSensorHumedSuelo(Tiempo: String, humedadSuelo: String): SensorHumedSuelo
		@aws_subscribe(mutations: ["updateSensorHumedSuelo"])
	onDeleteSensorHumedSuelo(Tiempo: String, humedadSuelo: String): SensorHumedSuelo
		@aws_subscribe(mutations: ["deleteSensorHumedSuelo"])
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input TableReporteDashboardFilterInput {
	Tiempo: TableStringFilterInput
}

input TableSensorHumedRelativaFilterInput {
	Tiempo: TableStringFilterInput
	humedadRelativa: TableStringFilterInput
}

input TableSensorHumedSueloFilterInput {
	Tiempo: TableStringFilterInput
	humedadSuelo: TableStringFilterInput
}

input TableSensorLuminosidadFilterInput {
	Tiempo: TableStringFilterInput
	luminosidadSolar: TableStringFilterInput
}

input TableSensorTempRelativaFilterInput {
	Tiempo: TableStringFilterInput
	temperaturaRelativa: TableStringFilterInput
}

input TableSensorTempSueloFilterInput {
	Tiempo: TableStringFilterInput
	temperaturaSuelo: TableStringFilterInput
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

type Todo {
	id: ID!
	name: String!
	description: String
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
}

input UpdateReporteDashboardInput {
	Tiempo: String!
}

input UpdateSensorHumedRelativaInput {
	Tiempo: String!
	humedadRelativa: String!
}

input UpdateSensorHumedSueloInput {
	Tiempo: String!
	humedadSuelo: String!
}

input UpdateSensorLuminosidadInput {
	Tiempo: String!
	luminosidadSolar: String!
}

input UpdateSensorTempRelativaInput {
	Tiempo: String!
	temperaturaRelativa: String!
}

input UpdateSensorTempSueloInput {
	Tiempo: String!
	temperaturaSuelo: String!
}

input UpdateTodoInput {
	id: ID!
	name: String
	description: String
}