
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type ModelTodoConnection {
  items: [Todo]!
  nextToken: String
}

type Mutation {
  createReporteDashboard(input: CreateReporteDashboardInput!): ReporteDashboard
  createSensorHumedRelativa(input: CreateSensorHumedRelativaInput!): SensorHumedRelativa
  createSensorHumedSuelo(input: CreateSensorHumedSueloInput!): SensorHumedSuelo
  createSensorLuminosidad(input: CreateSensorLuminosidadInput!): SensorLuminosidad
  createSensorTempRelativa(input: CreateSensorTempRelativaInput!): SensorTempRelativa
  createSensorTempSuelo(input: CreateSensorTempSueloInput!): SensorTempSuelo
  createTodo(condition: ModelTodoConditionInput, input: CreateTodoInput!): Todo
  deleteReporteDashboard(input: DeleteReporteDashboardInput!): ReporteDashboard
  deleteSensorHumedRelativa(input: DeleteSensorHumedRelativaInput!): SensorHumedRelativa
  deleteSensorHumedSuelo(input: DeleteSensorHumedSueloInput!): SensorHumedSuelo
  deleteSensorLuminosidad(input: DeleteSensorLuminosidadInput!): SensorLuminosidad
  deleteSensorTempRelativa(input: DeleteSensorTempRelativaInput!): SensorTempRelativa
  deleteSensorTempSuelo(input: DeleteSensorTempSueloInput!): SensorTempSuelo
  deleteTodo(condition: ModelTodoConditionInput, input: DeleteTodoInput!): Todo
  updateReporteDashboard(input: UpdateReporteDashboardInput!): ReporteDashboard
  updateSensorHumedRelativa(input: UpdateSensorHumedRelativaInput!): SensorHumedRelativa
  updateSensorHumedSuelo(input: UpdateSensorHumedSueloInput!): SensorHumedSuelo
  updateSensorLuminosidad(input: UpdateSensorLuminosidadInput!): SensorLuminosidad
  updateSensorTempRelativa(input: UpdateSensorTempRelativaInput!): SensorTempRelativa
  updateSensorTempSuelo(input: UpdateSensorTempSueloInput!): SensorTempSuelo
  updateTodo(condition: ModelTodoConditionInput, input: UpdateTodoInput!): Todo
}

type Query {
  getReporteDashboard(Tiempo: String!): ReporteDashboard
  getSensorHumedRelativa(Tiempo: String!, humedadRelativa: String!): SensorHumedRelativa
  getSensorHumedSuelo(Tiempo: String!, humedadSuelo: String!): SensorHumedSuelo
  getSensorLuminosidad(Tiempo: String!, luminosidadSolar: String!): SensorLuminosidad
  getSensorTempRelativa(Tiempo: String!, temperaturaRelativa: String!): SensorTempRelativa
  getSensorTempSuelo(Tiempo: String!, temperaturaSuelo: String!): SensorTempSuelo
  getTodo(id: ID!): Todo
  listReporteDashboards(filter: TableReporteDashboardFilterInput, limit: Int, nextToken: String): ReporteDashboardConnection
  listSensorHumedRelativas(filter: TableSensorHumedRelativaFilterInput, limit: Int, nextToken: String): SensorHumedRelativaConnection
  listSensorHumedSuelos(filter: TableSensorHumedSueloFilterInput, limit: Int, nextToken: String): SensorHumedSueloConnection
  listSensorLuminosidads(filter: TableSensorLuminosidadFilterInput, limit: Int, nextToken: String): SensorLuminosidadConnection
  listSensorTempRelativas(filter: TableSensorTempRelativaFilterInput, limit: Int, nextToken: String): SensorTempRelativaConnection
  listSensorTempSuelos(filter: TableSensorTempSueloFilterInput, limit: Int, nextToken: String): SensorTempSueloConnection
  listTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection
}

type ReporteDashboard {
  Tiempo: String!
  payload: String!
}

type ReporteDashboardConnection {
  items: [ReporteDashboard]
  nextToken: String
}

type SensorHumedRelativa @model{
  Tiempo: String!
  humedadRelativa: String!
}

type SensorHumedRelativaConnection {
  items: [SensorHumedRelativa]
  nextToken: String
}

type SensorHumedSuelo @model{
  Tiempo: String!
  humedadSuelo: String!
}

type SensorHumedSueloConnection {
  items: [SensorHumedSuelo]
  nextToken: String
}

type SensorLuminosidad @model{
  Tiempo: String!
  luminosidadSolar: String!
}

type SensorLuminosidadConnection {
  items: [SensorLuminosidad]
  nextToken: String
}

type SensorTempRelativa @model{
  Tiempo: String!
  temperaturaRelativa: String!
}

type SensorTempRelativaConnection {
  items: [SensorTempRelativa]
  nextToken: String
}

type SensorTempSuelo @model{
  Tiempo: String!
  temperaturaSuelo: String!
}

type SensorTempSueloConnection {
  items: [SensorTempSuelo]
  nextToken: String
}

type Subscription {
  onCreateReporteDashboard(Tiempo: String): ReporteDashboard @aws_subscribe(mutations : ["createReporteDashboard"])
  onCreateSensorHumedRelativa(Tiempo: String, humedadRelativa: String): SensorHumedRelativa @aws_subscribe(mutations : ["createSensorHumedRelativa"])
  onCreateSensorHumedSuelo(Tiempo: String, humedadSuelo: String): SensorHumedSuelo @aws_subscribe(mutations : ["createSensorHumedSuelo"])
  onCreateSensorLuminosidad(Tiempo: String, luminosidadSolar: String): SensorLuminosidad @aws_subscribe(mutations : ["createSensorLuminosidad"])
  onCreateSensorTempRelativa(Tiempo: String, temperaturaRelativa: String): SensorTempRelativa @aws_subscribe(mutations : ["createSensorTempRelativa"])
  onCreateSensorTempSuelo(Tiempo: String, temperaturaSuelo: String): SensorTempSuelo @aws_subscribe(mutations : ["createSensorTempSuelo"])
  onCreateTodo: Todo @aws_subscribe(mutations : ["createTodo"])
  onDeleteReporteDashboard(Tiempo: String): ReporteDashboard @aws_subscribe(mutations : ["deleteReporteDashboard"])
  onDeleteSensorHumedRelativa(Tiempo: String, humedadRelativa: String): SensorHumedRelativa @aws_subscribe(mutations : ["deleteSensorHumedRelativa"])
  onDeleteSensorHumedSuelo(Tiempo: String, humedadSuelo: String): SensorHumedSuelo @aws_subscribe(mutations : ["deleteSensorHumedSuelo"])
  onDeleteSensorLuminosidad(Tiempo: String, luminosidadSolar: String): SensorLuminosidad @aws_subscribe(mutations : ["deleteSensorLuminosidad"])
  onDeleteSensorTempRelativa(Tiempo: String, temperaturaRelativa: String): SensorTempRelativa @aws_subscribe(mutations : ["deleteSensorTempRelativa"])
  onDeleteSensorTempSuelo(Tiempo: String, temperaturaSuelo: String): SensorTempSuelo @aws_subscribe(mutations : ["deleteSensorTempSuelo"])
  onDeleteTodo: Todo @aws_subscribe(mutations : ["deleteTodo"])
  onUpdateReporteDashboard(Tiempo: String): ReporteDashboard @aws_subscribe(mutations : ["updateReporteDashboard"])
  onUpdateSensorHumedRelativa(Tiempo: String, humedadRelativa: String): SensorHumedRelativa @aws_subscribe(mutations : ["updateSensorHumedRelativa"])
  onUpdateSensorHumedSuelo(Tiempo: String, humedadSuelo: String): SensorHumedSuelo @aws_subscribe(mutations : ["updateSensorHumedSuelo"])
  onUpdateSensorLuminosidad(Tiempo: String, luminosidadSolar: String): SensorLuminosidad @aws_subscribe(mutations : ["updateSensorLuminosidad"])
  onUpdateSensorTempRelativa(Tiempo: String, temperaturaRelativa: String): SensorTempRelativa @aws_subscribe(mutations : ["updateSensorTempRelativa"])
  onUpdateSensorTempSuelo(Tiempo: String, temperaturaSuelo: String): SensorTempSuelo @aws_subscribe(mutations : ["updateSensorTempSuelo"])
  onUpdateTodo: Todo @aws_subscribe(mutations : ["updateTodo"])
}

enum ModelAttributeTypes {
  _null
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
}

enum ModelSortDirection {
  ASC
  DESC
}

input CreateReporteDashboardInput {
  Tiempo: String!
}

input CreateSensorHumedRelativaInput {
  Tiempo: String!
  humedadRelativa: String!
}

input CreateSensorHumedSueloInput {
  Tiempo: String!
  humedadSuelo: String!
}

input CreateSensorLuminosidadInput {
  Tiempo: String!
  luminosidadSolar: String!
}

input CreateSensorTempRelativaInput {
  Tiempo: String!
  temperaturaRelativa: String!
}

input CreateSensorTempSueloInput {
  Tiempo: String!
  temperaturaSuelo: String!
}

input CreateTodoInput {
  description: String
  id: ID
  name: String!
}

input DeleteReporteDashboardInput {
  Tiempo: String!
}

input DeleteSensorHumedRelativaInput {
  Tiempo: String!
  humedadRelativa: String!
}

input DeleteSensorHumedSueloInput {
  Tiempo: String!
  humedadSuelo: String!
}

input DeleteSensorLuminosidadInput {
  Tiempo: String!
  luminosidadSolar: String!
}

input DeleteSensorTempRelativaInput {
  Tiempo: String!
  temperaturaRelativa: String!
}

input DeleteSensorTempSueloInput {
  Tiempo: String!
  temperaturaSuelo: String!
}

input DeleteTodoInput {
  id: ID!
}

input ModelBooleanInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  eq: Boolean
  ne: Boolean
}

input ModelFloatInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input ModelIDInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: ModelSizeInput
}

input ModelIntInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelSizeInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelStringInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: ModelSizeInput
}

input ModelTodoConditionInput {
  and: [ModelTodoConditionInput]
  description: ModelStringInput
  name: ModelStringInput
  not: ModelTodoConditionInput
  or: [ModelTodoConditionInput]
}

input ModelTodoFilterInput {
  and: [ModelTodoFilterInput]
  description: ModelStringInput
  id: ModelIDInput
  name: ModelStringInput
  not: ModelTodoFilterInput
  or: [ModelTodoFilterInput]
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableReporteDashboardFilterInput {
  Tiempo: TableStringFilterInput
}

input TableSensorHumedRelativaFilterInput {
  Tiempo: TableStringFilterInput
  humedadRelativa: TableStringFilterInput
}

input TableSensorHumedSueloFilterInput {
  Tiempo: TableStringFilterInput
  humedadSuelo: TableStringFilterInput
}

input TableSensorLuminosidadFilterInput {
  Tiempo: TableStringFilterInput
  luminosidadSolar: TableStringFilterInput
}

input TableSensorTempRelativaFilterInput {
  Tiempo: TableStringFilterInput
  temperaturaRelativa: TableStringFilterInput
}

input TableSensorTempSueloFilterInput {
  Tiempo: TableStringFilterInput
  temperaturaSuelo: TableStringFilterInput
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input UpdateReporteDashboardInput {
  Tiempo: String!
}

input UpdateSensorHumedRelativaInput {
  Tiempo: String!
  humedadRelativa: String!
}

input UpdateSensorHumedSueloInput {
  Tiempo: String!
  humedadSuelo: String!
}

input UpdateSensorLuminosidadInput {
  Tiempo: String!
  luminosidadSolar: String!
}

input UpdateSensorTempRelativaInput {
  Tiempo: String!
  temperaturaRelativa: String!
}

input UpdateSensorTempSueloInput {
  Tiempo: String!
  temperaturaSuelo: String!
}

input UpdateTodoInput {
  description: String
  id: ID!
  name: String
}
